[
  {
    "path": "posts/2021-05-23-git-token/",
    "title": "Solving git(GitHub) token issue",
    "description": "In this tutorial, you will learn how to manage git and gitHub credential issue when you need to connect a local repo with GitHub.",
    "author": [
      {
        "name": "Dr. KAM Tin Seong, <br>Associate Professor of Information Systems (Practice)",
        "url": "https://www.smu.edu.sg/faculty/profile/9618/KAM-Tin-Seong"
      }
    ],
    "date": "2021-05-23",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nMotivation\r\nGetting Started\r\nChecking the Credential\r\nUsing gh_whoami()\r\nUsing git_sitrep()\r\n\r\nGet a personal access token (PAT)\r\nPut the PAT into the Git credential store\r\nReferences\r\n\r\nMotivation\r\nWhen running usethis::use_github() command in RStudio, you encountered error message as shown below.\r\n\r\nAs a result, you are not able to pull or push changes made to github repository.\r\nGetting Started\r\nBefore you can fix the issue, you must have gh and gitcreds packages installed. gh package minimalistic client to access GitHub’s REST and GraphQL APIs. gitcreds package, on the other hand, prvodies functions to query git credentials from R.\r\nNote: You will have the gitcreds and gh packages installed, as of usethis v2.0.0, because usethis uses gh, and gh uses gitcreds.\r\nChecking the Credential\r\nThere are two ways to check for PAT is already provided in your machine. The first method is by using gh_whoami() of gh package. Alternatively, git_sitrep() of usethis package can be used too.\r\nUsing gh_whoami()\r\nAt RStudio Console, type the command below and press Enter key.\r\n\r\n\r\ngh::gh_whoami()\r\n\r\n\r\n\r\nIf you already have a PAT, your Console window should look similar to the screenshot below.\r\n\r\nIn this case, you do not have to continue the remaining steps.\r\nIf no PAT information are revealed, you will move on to next step to put your PAT into the Git credential store.\r\nUsing git_sitrep()\r\nAt RStudio Console, type the command below and press Enter key.\r\n\r\n\r\nusethis::git_sitrep()\r\n\r\n\r\n\r\nIf you already have a PAT, your Console window should look similar to the screenshot below.\r\n\r\nNote: The above is an subset of the complete list display on the screen.\r\nGet a personal access token (PAT)\r\nAfter checking the PAT information in your machine, you are ready to fix the problem.\r\nFirstly, we need to get a PAT by typing the command below on RStudio Console followed by pressing the Enter key.\r\n\r\n\r\nusethis::create_github_token()\r\n\r\n\r\n\r\nAssuming you’re signed into GitHub, create_github_token() takes you to a pre-filled form to create a new PAT.\r\nScroll all the way down the page and click on Generate token button.\r\nCopy the PAT to the clipboard (i.e. Ctrl-C).\r\nIt is a good practice to store the PAT in a file.\r\nPut the PAT into the Git credential store\r\nBefore we move on, we assume that you have the PAT available on the clipboard of your computer.\r\nAt RStudio Console, type the command below.\r\n\r\n\r\ngitcreds::gitcreds_set()\r\n\r\n\r\n\r\nIf you don’t have a PAT stored already, it will prompt you to enter your PAT.\r\nPaste the PAT on it (i.e. Ctrol-V).\r\nIf you do already have a stored credential, gitcreds::gitcreds_set() reveals this and will even let you inspect it as shown in the screenshot below.\r\n\r\nThis helps you decide whether to keep the existing credential or replace it. When in doubt, embrace a new, known-to-be-good credential over an old one, of uncertain origins.\r\nTo confirm if the PAT have been stored correctly in your machine, you can repeat the step given on Checking the Credential section of this tutorial.\r\nReferences\r\nManaging Personal Access Tokens of gh package.\r\nManaging Git(Hub) Credentials of usethis package.\r\nChapter 10 Cache credentials for HTTPS of Happy Git and GitHub for the useR\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-05-25T14:15:17+08:00",
    "input_file": "git-token.knit.md"
  },
  {
    "path": "posts/2021-05-22-git-in-rstudio/",
    "title": "git in RStudio",
    "description": "This tutorial aims to provide you with the step-by-step guide on how to setup Git with R and RStudio.",
    "author": [
      {
        "name": "Dr. KAM Tin Seong, <br>Associate Professor of Information Systems (Practice)",
        "url": "https://www.smu.edu.sg/faculty/profile/9618/KAM-Tin-Seong"
      }
    ],
    "date": "2021-05-22",
    "categories": [],
    "contents": "\r\nInstalling Git\r\nTo get started, you need to install Git in your computer. Additionally you will also need a GitHub account.\r\nDownload Git by using this link.\r\nInstalling Git. Note: It is important to provide the install Administrator right when installing Git.\r\nOn GitHub create yourself a free GitHub account.\r\nSetup Git in RStudio\r\nThis step aims to tell RStudio where to find the Git installation.\r\nOpen RStudio and go to Tools -> Global Options…, click on Git/SVN.\r\nYour screen should look similar to the screenshot below.\r\n\r\nIf there is not setting or the setting is at the wrong path,\r\nclick on the Browse button behind Git executable:.\r\nNavigate to the correct folder where Git is installed. In general the path should be C:/Program Files/Git/bin/git.exe on 64bit machine on Windows OS.\r\nClick on the Apply button to confirm the changes.\r\nClick on OK button to close the window.\r\nRestart RStudio, if it worked out you will find the Git icon on the top toolbar, as shown below.\r\n\r\nConfigure Git\r\nIn this step, you will configure Git and set your user name and email (the email address you used to register on GitHub). You can directly open the Git prompt from within RStudio.\r\nNote: User name and email needs to be set only once.\r\nGo to Tools -> Shell to open the Git Shell.\r\nAt the Shell command window, type the following commands.\r\n\r\nNote: the user.name should be the user name on Github and the user.email should be the email address you used to create Github account.\r\nClose Shell window.\r\nReference\r\nIf you are new to Git and Github, this link provides a lot of useful resources.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-05-22T07:53:44+08:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-05-21-building-a-blog-with-distill-for-r-markdown/",
    "title": "Building a blog with distill for R Markdown",
    "description": "This tutorial aims to provide you a step-by-step guide to build a web blog by using distill for R Markdown package.",
    "author": [
      {
        "name": "Dr. KAM Tin Seong, <br>Associate Professor of Information Systems (Practice)",
        "url": "https://www.smu.edu.sg/faculty/profile/9618/KAM-Tin-Seong"
      }
    ],
    "date": "2021-05-21",
    "categories": [],
    "contents": "\r\nGetting Started\r\nInstalling distill\r\nBefore you getting started, you need to install distill.\r\nStart RStudio\r\nAt the Console window of RStudio, type the code chunk below:\r\n\r\n\r\ninstall.packages(\"distill\")\r\n\r\n\r\n\r\nTo learn more about what functions and features offer by distill, you should visit the homepage of distill for R Markdown at least once. The homepage provides a comprehensive discussion on the features and functions of distill.\r\nOpening github and Netlify accounts\r\nIn this tutorial, github will be used to host the blog post and will be deploy via Netlify. To create an account, please visit their respective homepage below:\r\ngihtub\r\nnetlify\r\nStart a New Blog Project\r\nTo start a new blog project,\r\nFrom the menu bar of RStudio, click on File -> New Project.\r\n\r\nThe New Project Wizard appears.\r\n\r\nClick on New Directory -> Distill Blog.\r\n\r\nYour screen should look similar to the screenshot below.\r\n\r\nFor Directory name:, type a name such as R4DSA. Avoid long name or/and name with spaces in between.\r\nFor Create project as subdirectory of:, navigate to a folder in your harddisk.\r\nFor Title:, provide a proper title for your blog (i.e. R for Data Science and Analytics).\r\nClick on Create Project when you are ready.\r\nLet us examine the Files window of RStudio as shown in the screenshot below. The home-directory is called R4DSA. It consists of the R4DSA.rproj file, the about.rmd file, the index.rmd file, the *_site.yml* file and two folders: *_posts* and *_site*.\r\n\r\nViewing the newly created blog page\r\nNext, let us view the newly created blog page.\r\nClick on _site folder.\r\nClick on index.html.\r\nSelect View in Web Browser from the context menu\r\nA web page appears on RStudio viewer as shown below.\r\n\r\nCongratulations! Your first web blog has been built successfully.\r\nLearning more about the blog content\r\nNotice that the about.rmd and index.rmd are located at the home-directory. On the other hand, the welcome.rmd is located at *R4DSA/_posts/welcome* sub-directory as shown in the screenshot below.\r\nThe *_posts* folder contains all the R Markdown files we will use to create the blog posts.\r\n\r\nThe *_site* folder contains all the final html files and other libraries required to build the web page\r\n\r\nEditing the _site.yml Page\r\nFrom RStudio window, click on _site.yml tab.\r\nYou screen should look similar to the screenshot below.\r\n\r\nThe _site.yml is where we control the content of the blog that include the name, title, descriptive, and the navigation bars.\r\nFor name: type R4DSA.\r\nTo update the change, the code chunk below should be used.\r\n\r\n\r\nrmarkdown::render_site()\r\n\r\n\r\n\r\nNote: It is important to run the code chunk above when _site.yml is edited.\r\nNotice that the title of the index page has changed to R4DSA instead of R for Data Science and Analytics.\r\n\r\nEditing welcome.rmd\r\nIn this section, you will learn how to edit the welcome.rmd file and update its corresponding html page.\r\nFrom RStudio window, click on welcome.rmd tab.\r\nYour screen will look similar to the screenshot below.\r\n\r\nThis is the default welcome page. Let us edit the welcome page by using your own personal information similar to the example below.\r\n\r\nKnit the document when the editing is completed.\r\nThe welcome page of the blog will look similar to the screenshot below.\r\n\r\nStarting Git\r\nIn this section, you will learn how to start a git service in RStudio by using use_git() of usethis package.\r\n Note: Use the code chunk below to install usethis if it has yet to be installed in your computer.\r\n\r\n\r\ninstall.packages(\"usethis\")\r\n\r\n\r\n\r\nNext, you will edit the code chunk below on RStudio Console.\r\n\r\n\r\nusethis::use_git()\r\n\r\n\r\n\r\nPress on Enter or Return key.\r\nThe follow message appears.\r\n\r\nAt this stage, we are not ready to commit the edition.\r\nFor Selection:, type 3.\r\nPress on Enter key.\r\nThe follow message appears.\r\n\r\nWe are going to re-start RStudio.\r\nFor Selection:, type 1.\r\nPress on Enter key.\r\nThe Switch Projects dialog window appears.\r\n\r\nClick on Save button.\r\nNotice that Git tab has been added on RStudio pane.\r\n\r\nYour screen should look similar to the screenshot below.\r\n\r\nWe are going to commit all changes.\r\nClick on the checkboxes in front of all the files.\r\nYour screen should look similar to the screenshot below.\r\n\r\nClick on Commit button.\r\nNotice that we can not push the commit because we have yet to configured Github.\r\nConfiguring and Pushing to Github\r\nIn this section, you will learn how to configure Github and push the commit to Github.\r\nAt RStudio Console, type the command below:\r\n\r\n\r\nusethis::use_github()\r\n\r\n\r\n\r\nPress on Enter key to run the command.\r\nOnce the operation completed, the Gihtub webpage appears.\r\n\r\nPublishing the Blog\r\nIn this section, you will learn how to publish the newly create blog on Netlify server.\r\nNote: This sectgion assume that you have already create an account wit Netlify.\r\nLogin Netlify.\r\nYour screen should look similar to the screenshot below.\r\n\r\nClick on the button of New site from Git.\r\nYour screen should look similar to the screenshot below.\r\n\r\nClick on Github button.\r\nYour screen should look similar to the screenshot below.\r\n\r\nScrolling down until Publish Directory appears.\r\n\r\nAt Publish directory, type -site.\r\nWhen you are ready,\r\nClick on Deploy site button.\r\nNotice that Netlify will give a temporary and yet weird name.\r\n\r\nYou can change the name by using the Site settings option.\r\nClick on Site settings button.\r\nYour screen should look similar to the screenshot below.\r\n\r\nClick on Change site name button.\r\nThe Change site name dialog window appears.\r\n\r\nGive the site an easy to remember name (i.e r4dsa).\r\nClick on Save button.\r\nNotice that the blog page has a new name (i.e. r4dsa) now.\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-05-21T21:50:37+08:00",
    "input_file": {}
  }
]
